#!/usr/bin/env python3
"""Generate commit messages using a language model,
or only print prompt if --stdout is given script"""

import os
import subprocess
import sys
import argparse
import logging
from subprocess import Popen, PIPE

# Constants
DEFAULT_MODEL = "qwen2.5-coder:14b"
DEFAULT_ATTEMPTS = 3
MAX_LINE_LENGTH = 74

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(message)s")
logger = logging.getLogger(__name__)


def get_git_diff() -> str:
    """Returns the staged git diff as a string.

    Raises:
        subprocess.CalledProcessError: If the git diff command fails.
    """
    custom_env = os.environ.copy()
    custom_env["GIT_PAGER"] = "cat"
    result = subprocess.run(
        ["git", "diff", "--cached"],
        capture_output=True,
        text=True,
        check=True,
        env=custom_env,
    )
    return result.stdout.strip()


def prompt_llm(
    prompt: str, model: str = DEFAULT_MODEL, attempts: int = DEFAULT_ATTEMPTS
) -> list[str]:
    """
    Sends a prompt to the specified language model and returns the generated messages.

    Args:
        prompt (str): The input prompt for the language model.
        model (str): The name of the language model to use. Defaults to DEFAULT_MODEL.
        attempts (int): The number of times to attempt generating a message.
        Defaults to DEFAULT_ATTEMPTS.

    Returns:
        list[str]: A list of generated messages from the language model.

    Raises:
        RuntimeError: If the LLM process fails.
    """
    messages = []
    for i in range(attempts):
        logger.info("=> LLM generation attempt '%s'", i)
        with Popen(
            ["ask", prompt], stdout=PIPE, bufsize=1, universal_newlines=True
        ) as p:
            if p.stdout is None:
                continue

            output = []
            for line in p.stdout:
                logger.info(line.rstrip())
                output.append(line)

            captured_output = "".join(output).strip()
            messages.append(f"{captured_output}\n")

    return messages


def commit(messages: list[str]) -> int:
    """
    Commits the staged changes with the provided commit messages.

    Args:
        messages (list[str]): A list of commit messages.

    Returns:
        int: The return code of the git commit command.
    """
    commit_message = ""
    for i, message in enumerate(messages):
        commit_message += f"#===Commit message generated #{i} ===\n"
        commit_message += message
        commit_message += f"#{'=' * 40}\n"
    result = subprocess.run(
        ["git", "commit", "-s", "-e", "-m", commit_message], check=False
    )
    return result.returncode


def generate_prompt(diff: str, context: str = "", use_emoji: bool = False) -> str:
    """
    Generates a commit message prompt based on the git diff and optional context.

    Args:
        diff (str): The git diff output to be converted into a commit message.
        context (str): Extra context to feed to the prompt. Defaults to an empty string.
        use_emoji (bool): Whether to use emojis in the commit message. Defaults to False.

    Returns:
        str: The generated commit message prompt.

    Raises:
        ValueError: If the diff is empty.
    """
    if not diff:
        raise ValueError("The diff is empty. Please stage changes before running.")

    if context:
        context = f"Take into account the following context:\n<context>\n{context}\n<\\context>"

    identity = "You are to act as an author of a commit message in git."

    commit_preface = (
        """Use GitMoji convention to preface the commit. Here are some help to choose the right emoji:
üêõ, Fix a bug;
‚ú®, Introduce new features;
üìù, Add or update documentation;
üöÄ, Deploy stuff;
‚úÖ, Add, update, or pass tests;
‚ôªÔ∏è, Refactor code;
‚¨ÜÔ∏è, Upgrade dependencies;
üîß, Add or update configuration files;
üåê, Internationalization and localization;
üí°, Add or update comments in source code;
"""
        if use_emoji
        else """
Do not preface the commit with anything, except for the conventional commit keywords (in lower case):
fix, feat, build, chore, ci, docs, style, refactor, perf, test.
"""
    )

    return f"""
{identity} Your mission is to create clean and comprehensive commit messages
as per the Conventional Commit Convention and explain WHAT were the changes and mainly WHY the changes were done.
I'll send you an output of 'git diff --staged' command, and you are to convert it into a commit message.
{commit_preface}
Add a short description of WHY the changes are done after the commit message.
Don't start it with 'This commit', just describe the changes.
Use the present tense. Lines must not be longer than {MAX_LINE_LENGTH} characters. Use English for the commit message.
{context}

<diff>
{diff}
<\\diff>
"""


def main() -> None:
    """
    Main function to execute the script. Parses command-line arguments, generates a prompt,
    and either prints it or sends it to a language model for processing.
    """
    parser = argparse.ArgumentParser(
        description=(
            "Generate commit messages using a language model,"
            " or only print prompt if --stdout is given."
        )
    )
    parser.add_argument(
        "-c", "--context", help="Extra context to feed to prompt.", type=str, default=""
    )
    parser.add_argument(
        "-n",
        "--attempts",
        help="Number of generations asked.",
        type=int,
        default=DEFAULT_ATTEMPTS,
    )
    parser.add_argument(
        "-m",
        "--model",
        help=f"Set model to use, default is {DEFAULT_MODEL}",
        type=str,
        default=DEFAULT_MODEL,
    )
    parser.add_argument(
        "--stdout",
        help="If given, echo's prompt to stdout instead of sending it to the model.",
        action="store_true",
    )
    parser.add_argument(
        "-e", "--emoji", help="Uses emojis if the flag is given.", action="store_true"
    )
    args = parser.parse_args()

    try:
        diff = get_git_diff()
        prompt = generate_prompt(diff, args.context, use_emoji=args.emoji)

        if args.stdout:
            print(prompt)
            sys.exit(0)

        commit_messages = prompt_llm(prompt, attempts=args.attempts, model=args.model)
        ret = commit(commit_messages)
        sys.exit(ret)

    except (subprocess.CalledProcessError, ValueError, RuntimeError) as e:
        logger.error("Error: %s", e)
        sys.exit(1)


if __name__ == "__main__":
    main()
