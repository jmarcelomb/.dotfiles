#!/usr/bin/env python3

import os
import subprocess
import sys
import argparse
from subprocess import Popen, PIPE


def get_git_diff() -> str:
    """Returns the staged git diff as a string."""
    custom_env = os.environ.copy()
    custom_env["GIT_PAGER"] = "cat"
    result = subprocess.run(
        ["git", "diff", "--cached"],
        capture_output=True,
        text=True,
        check=True,
        env=custom_env,
    )
    return result.stdout.strip()


def prompt_llm(
    prompt: str, model: str = "qwen2.5-coder:14b", attempts: int = 3
) -> list[str]:
    """
    Sends a prompt to the specified language model and returns the generated messages.

    Args:
        prompt (str): The input prompt for the language model.
        model (str): The name of the language model to use. Defaults to "qwen2.5-coder:14b".
        attempts (int): The number of times to attempt generating a message. Defaults to 3.

    Returns:
        list[str]: A list of generated messages from the language model.
    """
    messages = []
    for _ in range(attempts):
        with Popen(
            ["ask", model, prompt], stdout=PIPE, bufsize=1, universal_newlines=True
        ) as p:
            if p.stdout is None:
                raise RuntimeError(
                    "Subprocess stdout is None. Check Popen configuration."
                )
            output = []
            for line in p.stdout:
                print(line, end="")
                output.append(line)

            captured_output = "".join(output).strip()
            messages.append(f"{captured_output}\n")
    return messages


def commit(messages: list[str]) -> int:
    """
    Commits the staged changes with the provided commit messages.

    Args:
        messages (list[str]): A list of commit messages.
    """
    commit_message = ""
    for i, message in enumerate(messages):
        commit_message += f"#===Commit message generated #{i} ===\n"
        commit_message += message
        commit_message += f"#{'=' * 40}\n"

    res = subprocess.run(
        ["git", "commit", "-s", "-e", "-m", commit_message], check=False
    )
    return res.returncode


def generate_prompt(diff: str, context: str = "", use_emoji: bool = False) -> str:
    """Generates a commit message using a local instance of Ollama.

    Args:
        diff (str): The git diff output to be converted into a commit message.
        context (str): Extra context to feed to the prompt. Defaults to an empty string.
        use_emoji (bool): Whether to use emojis in the commit message. Defaults to False.

    Returns:
        str: The generated commit message prompt.
    """
    if not diff:
        print(
            "Error: The diff is empty. Please stage changes before running.",
            file=sys.stderr,
        )
        sys.exit(1)

    if context:
        context = f"Take into account the following context:\n<context>\n{context}\n<\\context>"

    identity = "You are to act as an author of a commit message in git."

    commit_preface = (
        """Use GitMoji convention to preface the commit. Here are some help to choose the right emoji:
🐛, Fix a bug;
✨, Introduce new features;
📝, Add or update documentation;
🚀, Deploy stuff;
✅, Add, update, or pass tests;
♻️, Refactor code;
⬆️, Upgrade dependencies;
🔧, Add or update configuration files;
🌐, Internationalization and localization;
💡, Add or update comments in source code;
"""
        if use_emoji
        else """
Do not preface the commit with anything, except for the conventional commit keywords (in lower case):
fix, feat, build, chore, ci, docs, style, refactor, perf, test.
"""
    )

    return f"""
{identity} Your mission is to create clean and comprehensive commit messages
as per the Conventional Commit Convention and explain WHAT were the changes and mainly WHY the changes were done.
I'll send you an output of 'git diff --staged' command, and you are to convert it into a commit message.
{commit_preface}
Add a short description of WHY the changes are done after the commit message.
Don't start it with 'This commit', just describe the changes.
Use the present tense. Lines must not be longer than 74 characters. Use English for the commit message.
{context}

<diff>
{diff}
<\\diff>
"""


def main() -> None:
    """
    Main function to execute the script. Parses command-line arguments, generates a prompt,
    and either prints it or sends it to a language model for processing.
    """
    default_model = "qwen2.5-coder:14b"
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-c", "--context", help="Extra context to feed to prompt.", type=str, default=""
    )
    parser.add_argument(
        "-n", "--attempts", help="Number of generations asked.", type=int, default=3
    )
    parser.add_argument(
        "-m",
        "--model",
        help=f"Set model to use, default is {default_model}",
        type=str,
        default=default_model,
    )
    parser.add_argument(
        "--stdout",
        help="If given, echo's prompt to stdout instead of doing to ollama.",
        action="store_true",
    )
    parser.add_argument(
        "-e", "--emoji", help="Uses emojis if the flag is given.", action="store_true"
    )
    args = parser.parse_args()
    diff = get_git_diff()
    prompt = generate_prompt(diff, args.context, use_emoji=args.emoji)

    if args.stdout:
        print(prompt)
        sys.exit(0)

    commit_messages = prompt_llm(prompt, attempts=args.attempts, model=args.model)
    ret = commit(commit_messages)
    sys.exit(ret)


if __name__ == "__main__":
    main()
